AWSTemplateFormatVersion: '2010-09-09'
Description: 'Authstore Cognito resources'

Parameters:
  Environment:
    Type: String
    Default: "dev"
    AllowedValues: 
      - "dev"
      - "staging"
      - "prod"
    Description: The environment this template is being deployed to

  UserPoolName:
    Type: String
    Description: Name of the Cognito User Pool
    Default: "AuthService-UserPool"

  CognitoDomainPrefix:
    Type: String
    Description: Prefix for the Cognito domain (e.g., yourbrand-auth)
    Default: ""

  EmailVerificationMessage:
    Type: String
    Description: Email message for verification
    Default: "Thank you for registering. Your verification code is {####}."

  EmailVerificationSubject:
    Type: String
    Description: Email subject for verification
    Default: "Your verification code"

  CallbackUrls:
    Type: String
    Description: List of allowed callback URLs
    Default: "http://localhost:3000/callback,https://auth.jsachs.studio:3000/callback"

  LogoutUrls:
    Type: String
    Description: List of allowed logout URLs
    Default: "http://localhost:3000,https://auth.jsachs.studio:3000/callback"

  ServiceName:
    Type: String
    Description: Name for the service (used for secret naming)
    Default: "AuthService"

Conditions:
  HasExplicitDomainPrefix: !Not [!Equals [!Ref CognitoDomainPrefix, ""]]

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: handle
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: app_roles
          AttributeDataType: String
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MaxLength: '2048'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      EmailVerificationMessage: !Ref EmailVerificationMessage
      EmailVerificationSubject: !Ref EmailVerificationSubject
      MfaConfiguration: 'OFF'
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UserPoolTags:
        Environment: !Ref Environment
      DeletionProtection: INACTIVE

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "${UserPoolName}-client"
      GenerateSecret: true
      RefreshTokenValidity: 30
      AccessTokenValidity: 1
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: 'hours'
        IdToken: 'hours'
        RefreshToken: 'days'
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs: !Split [",", !Ref CallbackUrls]
      LogoutURLs: !Split [",", !Ref LogoutUrls]
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  UserPoolSecretHash:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${ServiceName}/${Environment}/UserPoolClientSecret"
      Description: "Secret hash for Cognito User Pool Client"
      SecretString: '{"clientSecret": ""}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceName

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: 'Administrators'
      Description: 'Administrative users of the central auth service'
      Precedence: 0
      UserPoolId: !Ref UserPool

  AppUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: 'AppUsers'
      Description: 'General application users'
      Precedence: 10
      UserPoolId: !Ref UserPool

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !If 
        - HasExplicitDomainPrefix
        - !Ref CognitoDomainPrefix
        - !Join 
          - '-'
          - - 'auth'
            - !Select [0, !Split ['-', !Ref AWS::StackName]]
            - !Ref Environment
            - !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      UserPoolId: !Ref UserPool

Outputs:
  UserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"

  UserPoolClientSecretValue:
    Description: Secret of the Cognito User Pool Client
    Value: !GetAtt UserPoolClient.ClientSecret
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientSecret"

  UserPoolSecretHashArn:
    Description: ARN of the Secret Manager secret for the Cognito User Pool Client Secret
    Value: !Ref UserPoolSecretHash
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolSecretHashArn"

  UserPoolDomainName:
    Description: Domain name of the Cognito User Pool
    Value: !If 
      - HasExplicitDomainPrefix
      - !Sub "${CognitoDomainPrefix}.auth.${AWS::Region}.amazoncognito.com"
      - !Join 
        - '.'
        - - !Join 
            - '-'
            - - 'auth'
              - !Select [0, !Split ['-', !Ref AWS::StackName]]
              - !Ref Environment
              - !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
          - 'auth'
          - !Ref AWS::Region
          - 'amazoncognito.com'
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolDomain"

  UserPoolArn:
    Description: ARN of the Cognito User Pool
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolArn"