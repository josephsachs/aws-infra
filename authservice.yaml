AWSTemplateFormatVersion: '2010-09-09'
Description: 'Authentication Service'

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, qa, prod]
    Description: Deployment environment
    
  ReactBucketName:
    Type: String
    Description: Name of S3 bucket to host React application
    Default: "authservice-app-bucket"
    
  ExpressArtifactBucketName:
    Type: String
    Description: Name of S3 bucket for Next.js artifacts
    Default: "authservice-artifact-bucket"
    
  CognitoUserPoolId:
    Type: String
    Description: ID of the Cognito User Pool (from foundation stack)
    Default: "us-east-2_fB2oxrw4l"
    
  CognitoClientId:
    Type: String
    Description: ID of the Cognito App Client (from foundation stack)
    Default: "79t8bca8dsdm0l06c6vbsm404n"
    
  CognitoClientSecretName:
    Type: String
    Description: Name of the Secret in Secrets Manager containing the Cognito client secret
    Default: "AuthService/prod/UserPoolClientSecret"
  
  DomainName:
    Type: String
    Default: "auth.jsachs.studio"
    Description: Domain name for the authentication service
    
  ApiUrl:
    Type: String
    Description: URL for the API server
    Default: https://auth.jsachs.studio
    
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type
    
  LatestAmazonLinuxAmi:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    Description: Latest Amazon Linux AMI from SSM Parameter Store
    
  CertificateArn:
    Type: String
    Description: ARN of the ACM certificate for the domain
    Default: "arn:aws:acm:us-east-1:138689217417:certificate/076f3740-bd2f-4a18-9789-7230a6f9e6dc"

Mappings:
  EnvironmentMap:
    dev:
      CorsOrigins: "http://localhost:3000,https://dev.auth.jsachs.studio"
    qa:
      CorsOrigins: "https://qa.auth.jsachs.studio"
    prod:
      CorsOrigins: "https://auth.jsachs.studio"

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]

Resources:
  AuthServiceVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthServiceVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthServiceVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AuthServiceVPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AuthServiceVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RT

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  ReactAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ReactBucketName}-${Environment}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: !Split [',', !FindInMap [EnvironmentMap, !Ref Environment, CorsOrigins]]
            MaxAge: 3600
  
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${ReactBucketName}-${Environment}"
        
  ReactAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReactAppBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub "${ReactAppBucket.Arn}/*"
  
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for API service load balancer
      VpcId: !Ref AuthServiceVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ApiServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for API service instances
      VpcId: !Ref AuthServiceVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ApiLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-alb
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB

  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-tg
      Port: 3001
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref AuthServiceVPC
      HealthCheckPath: /health
      HealthCheckPort: 3001
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-TargetGroup

  ApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApiTargetGroup
      LoadBalancerArn: !Ref ApiLoadBalancer
      Port: 80
      Protocol: HTTP

  ApiLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-lt
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: !Ref LatestAmazonLinuxAmi
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref ApiServerSecurityGroup
        IamInstanceProfile:
          Name: !Ref ApiServerInstanceProfile
        UserData:
          Fn::Base64:
            !Sub
              - |
                #!/bin/bash -xe
                
                # Add debugging information to track progress
                exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                echo "Starting user data script execution"
                
                # Set up swap space early to prevent memory issues
                echo "Setting up swap space"
                dd if=/dev/zero of=/swapfile bs=1M count=2048
                chmod 600 /swapfile
                mkswap /swapfile
                swapon /swapfile
                echo "/swapfile swap swap defaults 0 0" >> /etc/fstab
                
                echo "Updating system packages"
                yum update -y
                
                echo "Installing Node.js"
                curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
                yum install -y nodejs unzip awscli
                
                echo "Creating application directory"
                mkdir -p /opt/auth-service
                
                echo "Downloading application package"
                aws s3 cp s3://${ExpressArtifactBucketName}/auth-service.zip /tmp/auth-service.zip
                
                if [ ! -f /tmp/auth-service.zip ]; then
                  echo "ERROR: Failed to download application package"
                  exit 1
                fi
                
                echo "Extracting application package"
                unzip -o /tmp/auth-service.zip -d /opt/auth-service/
                
                echo "Setting up data directory"
                mkdir -p /opt/auth-service/data
                touch /opt/auth-service/data/sessions.db
                
                echo "Setting permissions"
                chown -R ec2-user:ec2-user /opt/auth-service
                chmod 755 /opt/auth-service/data
                chmod 644 /opt/auth-service/data/sessions.db
                
                echo "Installing dependencies with native rebuild"
                cd /opt/auth-service
                
                # Install build tools needed for native modules
                yum install -y gcc gcc-c++ make python3
                
                # Clean and reinstall dependencies to ensure native modules are built correctly
                rm -rf node_modules
                npm install --production
                
                echo "Creating environment configuration"
                cat > /opt/auth-service/.env << 'EOL'
                ENVIRONMENT=${Environment}
                AWS_REGION=${AWS::Region}
                COGNITO_USER_POOL_ID=${CognitoUserPoolId}
                COGNITO_CLIENT_ID=${CognitoClientId}
                COGNITO_CLIENT_SECRET_NAME=${CognitoClientSecretName}
                ALLOWED_ORIGINS=${CorsOrigins}
                EOL
                
                echo "Creating systemd service"
                cat > /etc/systemd/system/auth-service.service << 'EOL'
                [Unit]
                Description=Express Authentication API Server
                After=network.target

                [Service]
                Type=simple
                User=ec2-user
                WorkingDirectory=/opt/auth-service
                ExecStart=/usr/bin/node dist/server.js
                Restart=on-failure
                RestartSec=10
                StandardOutput=journal
                StandardError=journal
                SyslogIdentifier=express-auth
                Environment=PORT=3001
                Environment=NODE_ENV=production

                [Install]
                WantedBy=multi-user.target
                EOL
                
                echo "Starting service"
                systemctl daemon-reload
                systemctl enable auth-service
                systemctl start auth-service
                
                echo "User data script completed"
              - CorsOrigins: !FindInMap [EnvironmentMap, !Ref Environment, CorsOrigins]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-api-server
              - Key: Environment
                Value: !Ref Environment

  ApiAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref ApiLaunchTemplate
        Version: !GetAtt ApiLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref ApiTargetGroup
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-api-server
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  ReactCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        Aliases:
          - !Ref DomainName
        ViewerCertificate: !If
          - HasCertificate
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt ReactAppBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - Id: ApiOrigin
            DomainName: !GetAtt ApiLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginSSLProtocols: [TLSv1.2]
              OriginKeepaliveTimeout: 5
              OriginReadTimeout: 30
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        CacheBehaviors:
          - PathPattern: "/*"
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: 
                - "Accept"
                - "Authorization"
                - "Content-Type"
                - "Origin"
                - "Referer"
                - "X-CSRF-Token"
              Cookies:
                Forward: all
            Compress: true
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
  
  ApiServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
  
  ApiServerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-ApiServerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !Sub arn:aws:s3:::${ExpressArtifactBucketName}
              - !Sub arn:aws:s3:::${ExpressArtifactBucketName}/*
          
          - Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
            Resource: 
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${CognitoClientSecretName}*
      Roles:
        - !Ref ApiServerRole
  
  ApiServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ApiServerRole

Outputs:
  ReactAppBucketURL:
    Value: !GetAtt ReactAppBucket.WebsiteURL
    Description: S3 website URL for the React app (dev only)
    
  CloudFrontDistributionURL:
    Value: !Sub "https://${ReactCloudFrontDistribution.DomainName}"
    Description: CloudFront distribution URL for secure access
    
  CustomDomainURL:
    Value: !Sub "https://${DomainName}"
    Description: Custom domain URL for the application
    Condition: HasCertificate
    
  ApiEndpoint:
    Value: !Sub "https://${DomainName}"
    Description: API endpoint via CloudFront
    Condition: HasCertificate
    
  LoadBalancerDNS:
    Value: !GetAtt ApiLoadBalancer.DNSName
    Description: DNS name of the Application Load Balancer
    
  DirectApiEndpoint:
    Value: !Sub "http://${ApiLoadBalancer.DNSName}"
    Description: Direct API endpoint for the API server (for testing only)