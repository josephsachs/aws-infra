AWSTemplateFormatVersion: '2010-09-09'
Description: 'Authentication Service'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, qa, prod]
    Description: Deployment environment
    
  ReactBucketName:
    Type: String
    Description: Name of S3 bucket to host React application
    Default: "authservice-app-bucket"
    
  NextArtifactBucketName:
    Type: String
    Description: Name of S3 bucket for Next.js artifacts
    Default: "authservice-artifact-bucket"
    
  CognitoUserPoolId:
    Type: String
    Description: ID of the Cognito User Pool (from foundation stack)
    Default: "us-east-2_fB2oxrw4l"
    
  CognitoClientId:
    Type: String
    Description: ID of the Cognito App Client (from foundation stack)
    Default: "79t8bca8dsdm0l06c6vbsm404n"
    
  CognitoClientSecretName:
    Type: String
    Description: Name of the Secret in Secrets Manager containing the Cognito client secret
    Default: "AuthService/prod/UserPoolClientSecret"
  
  DomainName:
    Type: String
    Default: "auth.jsachs.studio"
    Description: Domain name for the authentication service
    
  ApiUrl:
    Type: String
    Description: URL for the API server
    Default: https://auth.jsachs.studio
    
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type
    
  LatestAmazonLinuxAmi:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    Description: Latest Amazon Linux AMI from SSM Parameter Store

Mappings:
  EnvironmentMap:
    dev:
      CorsOrigins: "http://localhost:3000,https://dev.auth.jsachs.studio"
    qa:
      CorsOrigins: "https://qa.auth.jsachs.studio"
    prod:
      CorsOrigins: "https://auth.jsachs.studio"

Resources:
  AuthServiceVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AuthServiceVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AuthServiceVPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AuthServiceVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RT

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  ReactAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ReactBucketName}-${Environment}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: !Split [',', !FindInMap [EnvironmentMap, !Ref Environment, CorsOrigins]]
            MaxAge: 3600
  
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${ReactBucketName}-${Environment}"
        
  ReactAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReactAppBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub "${ReactAppBucket.Arn}/*"
  
  ReactCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt ReactAppBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
    
  #NextArtifactBucket:
  #  Type: AWS::S3::Bucket
  #  Properties:
  #    BucketName: !Sub ${NextArtifactBucketName}-${Environment}
  #    VersioningConfiguration:
  #      Status: Enabled
  
  NextServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Path: /
  
  NextServerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-NextServerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !Sub arn:aws:s3:::${NextArtifactBucketName}   ##-${Environment}
              - !Sub arn:aws:s3:::${NextArtifactBucketName}/* ##-${Environment}/*
          
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
            Resource:
              - !Sub arn:aws:s3:::${ReactBucketName}-${Environment}/config.js
          
          - Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
            Resource: 
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${CognitoClientSecretName}*
      Roles:
        - !Ref NextServerRole
  
  NextServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref NextServerRole
  
  NextServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Next.js authentication server
      VpcId: !Ref AuthServiceVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3001
          ToPort: 3001
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  
  NextServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmazonLinuxAmi
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref NextServerInstanceProfile
      SecurityGroupIds:
        - !Ref NextServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NextServer
        - Key: Environment
          Value: !Ref Environment
      UserData:
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash -xe
              
              yum update -y
              
              curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
              yum install -y nodejs

              npm install -g yarn next
              
              aws s3 cp s3://${NextArtifactBucketName}/next-app.zip /tmp/
              unzip /tmp/next-app.zip -d /opt/auth-service/
              chmod -R 755 /opt/auth-service/
              
              mkdir -p /opt/auth-service/server/data
              
              touch /opt/auth-service/server/sessions.db
              chmod 700 /opt/auth-service/data
              chmod 600 /opt/auth-service/data/sessions.db
              
              cat > /opt/auth-service/.env << 'EOL'
              ENVIRONMENT=${Environment}
              AWS_REGION=${AWS::Region}
              COGNITO_USER_POOL_ID=${CognitoUserPoolId}
              COGNITO_CLIENT_ID=${CognitoClientId}
              COGNITO_CLIENT_SECRET_NAME=${CognitoClientSecretName}
              ALLOWED_ORIGINS=${CorsOrigins}
              EOL

              cd /opt/auth-service/server

              sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              
              npm install --production
              npm run build
              
              cat > /tmp/config.js << 'EOL'
              window.APP_CONFIG = {
                apiUrl: "${ApiUrl}",
                allowedOrigins: "${CorsOrigins}",
                environment: "${Environment}",
                endpoints: {
                  login: "/api/login",
                  logout: "/api/logout",
                  verify: "/api/verify",
                  challenge: "/api/challenge"
                }
              };
              EOL
              
              aws s3 cp /tmp/config.js s3://${ReactBucketName}-${Environment}/config.js
              
              cat > /etc/systemd/system/auth-service.service << 'EOL'
              [Unit]
              Description=Next.js Authentication API Server
              After=network.target

              [Service]
              Type=simple
              User=ec2-user
              WorkingDirectory=/opt/auth-service/standalone
              ExecStart=/usr/bin/node server.js
              Restart=on-failure
              RestartSec=10
              StandardOutput=journal
              StandardError=journal
              SyslogIdentifier=nextjs-auth
              Environment=PORT=3001
              Environment=NODE_ENV=production

              [Install]
              WantedBy=multi-user.target
              EOL
              
              systemctl daemon-reload
              systemctl enable auth-service
              systemctl start auth-service
            - CorsOrigins: !FindInMap [EnvironmentMap, !Ref Environment, CorsOrigins]

Outputs:
  ReactAppBucketURL:
    Value: !GetAtt ReactAppBucket.WebsiteURL
    Description: S3 website URL for the React app (dev only)
    
  ReactAppCloudFrontURL:
    Value: !Sub "https://${ReactCloudFrontDistribution.DomainName}"
    Description: CloudFront distribution URL for secure React app access
    
  NextServerPublicDNS:
    Value: !GetAtt NextServerInstance.PublicDnsName
    Description: Public DNS name of the Next.js server
    
  NextServerApiEndpoint:
    Value: !Sub "http://${NextServerInstance.PublicDnsName}:3001"
    Description: API endpoint for the Next.js authentication server